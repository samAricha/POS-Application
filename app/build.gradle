import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'io.realm.kotlin'
    id 'com.google.devtools.ksp' version '1.7.21-1.0.8'
    id 'kotlin-kapt'
    id "io.gitlab.arturbosch.detekt" version "1.22.0"
}

android {
    namespace 'com.niyaj.popos'

    compileSdk 33

    defaultConfig {
        applicationId "com.niyaj.popos"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0.2"
        testInstrumentationRunner "com.niyaj.popos.HiltTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        benchmark {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = compose_version
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            resources.excludes.add("META-INF/LICENSE.md")
            resources.excludes.add("META-INF/LICENSE-notice.md")
            exclude "lib/arm64-v8a/librealm-jni.so"
            resources.excludes += "DebugProbesKt.bin"
        }
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        }
    }

    applicationVariants.all { variant ->
        kotlin.sourceSets {
            getByName(variant.name) {
                kotlin.srcDir("build/generated/ksp/${variant.name}/kotlin")
            }
        }
    }

    testOptions {
        emulatorSnapshots {
            enableForTestFailures true
            maxSnapshotsForTestFailures 2
            compressSnapshots false
        }
        
        unitTests {
            includeAndroidResources = true
        }
    }

    detekt {
        // Version of Detekt that will be used. When unspecified the latest detekt
        // version found will be used. Override to stay on the same version.
        toolVersion = "1.22.0"

        // The directories where detekt looks for source files.
        // Defaults to `files("src/main/java", "src/test/java", "src/main/kotlin", "src/test/kotlin")`.
        source = files(
                "src/main/kotlin",
                "gensrc/main/kotlin"
        )

        // Builds the AST in parallel. Rules are always executed in parallel.
        // Can lead to speedups in larger projects. `false` by default.
        parallel = true

        // Define the detekt configuration(s) you want to use.
        // Defaults to the default detekt configuration.
        config = files("src/main/java/com/niyaj/popos/config/detekt/detekt.yml")

        // Applies the config files on top of detekt's default config file. `false` by default.
        buildUponDefaultConfig = false

        // Turns on all the rules. `false` by default.
        allRules = false

        // Specifying a baseline file. All findings stored in this file in subsequent runs of detekt.
//        baseline = file("path/to/baseline.xml")

        // Disables all default detekt rule-sets and will only run detekt with custom rules
        // defined in plugins passed in with `detektPlugins` configuration. `false` by default.
        disableDefaultRuleSets = false

        // Adds debug output during task execution. `false` by default.
        debug = false

        // If set to `true` the build does not fail when the
        // maxIssues count was reached. Defaults to `false`.
        ignoreFailures = false

        // Android: Don't create tasks for the specified build types (e.g. "release")
        ignoredBuildTypes = ["release"]

        // Android: Don't create tasks for the specified build flavor (e.g. "production")
        ignoredFlavors = ["production"]

        // Android: Don't create tasks for the specified build variants (e.g. "productionRelease")
        ignoredVariants = ["productionRelease"]

        // Specify the base path for file paths in the formatted reports.
        // If not set, all file paths reported will be absolute file path.
        basePath = projectDir
    }

    tasks.named("detekt").configure {
        reports {
            // Enable/Disable XML report (default: true)
            xml.required.set(false)
            xml.outputLocation.set(file("build/reports/detekt.xml"))
            // Enable/Disable HTML report (default: true)
            html.required.set(true)
            html.outputLocation.set(file("build/reports/detekt.html"))
            // Enable/Disable TXT report (default: true)
            txt.required.set(true)
            txt.outputLocation.set(file("build/reports/detekt.txt"))
            // Enable/Disable SARIF report (default: false)
            sarif.required.set(false)
            sarif.outputLocation.set(file("build/reports/detekt.sarif"))
            // Enable/Disable MD report (default: false)
            md.required.set(true)
            md.outputLocation.set(file("build/reports/detekt.md"))
        }
    }
}


dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.activity:activity-compose:1.6.1'

//    implementation("androidx.compose.material3:material3:1.1.0-alpha02")
//    implementation("androidx.compose.material3:material3-window-size-class:1.1.0-alpha02")

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")
    implementation "androidx.lifecycle:lifecycle-runtime-compose:$lifecycle_version"

    // Lifecycles only (without ViewModel)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")
    implementation ("androidx.compose.runtime:runtime-livedata:1.3.3")

    // Saved state module for ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version")

    // Annotation processor
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")

    // Compose dependencies
    implementation "androidx.navigation:navigation-compose:2.6.0-alpha04"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"

    // Kotlin + coroutines
    implementation("androidx.work:work-runtime-ktx:2.8.0-rc01")
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:2.8.0-rc01"

    //Accompanist
    implementation 'com.google.accompanist:accompanist-flowlayout:0.28.0'
    implementation 'com.google.accompanist:accompanist-systemuicontroller:0.28.0'
    implementation 'com.google.accompanist:accompanist-permissions:0.28.0'
    implementation 'com.google.accompanist:accompanist-swiperefresh:0.27.0'
    implementation 'com.google.accompanist:accompanist-placeholder-material:0.28.0'
    implementation 'com.google.accompanist:accompanist-pager:0.28.0'
    implementation 'com.google.accompanist:accompanist-pager-indicators:0.28.0'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    //Dagger - Hilt
    // When using Kotlin.
    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    implementation 'com.google.dagger:hilt-android:2.44.2'
    kapt 'com.google.dagger:hilt-compiler:2.44.2'
    annotationProcessor 'com.google.dagger:hilt-compiler:2.44.2'

    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'

    // Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    //RevealSwipe
    implementation 'de.charlex.compose:revealswipe:1.1.0'

    //Pos-printer
    implementation 'com.github.DantSu:ESCPOS-ThermalPrinter-Android:3.2.1'

    //Realm
    implementation 'io.realm.kotlin:library-sync:1.5.1'

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'

    //Compose Material Dialogs
    implementation "io.github.vanpra.compose-material-dialogs:core:0.9.0"
    implementation "io.github.vanpra.compose-material-dialogs:datetime:0.9.0"

    //Paging Library
    implementation("androidx.paging:paging-runtime:3.1.1")
    // optional - Jetpack Compose integration
    implementation("androidx.paging:paging-compose:1.0.0-alpha17")

    //RamCosta Library
    implementation 'io.github.raamcosta.compose-destinations:animations-core:1.7.30-beta'
    ksp 'io.github.raamcosta.compose-destinations:ksp:1.7.30-beta'

    //Moshi
    ksp("com.squareup.moshi:moshi-kotlin-codegen:1.14.0")
    implementation("com.squareup.moshi:moshi:1.14.0")

    //ProfileInstaller
    implementation "androidx.profileinstaller:profileinstaller:1.3.0-alpha02"

    // Local unit tests
    testImplementation "androidx.test:core:1.5.0"
    testImplementation "junit:junit:4.13.2"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation 'io.mockk:mockk:1.13.3'
    debugImplementation "androidx.compose.ui:ui-test-manifest:1.4.0-alpha03"

    // For instrumentation tests
    androidTestImplementation  'com.google.dagger:hilt-android-testing:2.44.2'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.44.2'

    // For local unit tests
    testImplementation 'com.google.dagger:hilt-android-testing:2.44.2'
    kaptTest 'com.google.dagger:hilt-compiler:2.44.2'

    // Instrumentation tests
    androidTestImplementation "junit:junit:4.13.2"
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation "com.google.truth:truth:1.1.3"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation 'io.mockk:mockk-android:1.13.3'
    androidTestImplementation 'androidx.test:runner:1.5.2'
}